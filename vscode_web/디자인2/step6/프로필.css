* {
  /* 
    우리가 패딩을 줬을 때 높이와 너비가 그 패딩을 포함했을 때도
    동일한 높이와 너비가 되도록 border-box로 준다
    */
  box-sizing: border-box; /* 1 */
}

body {
  font-family: "Open Sans", sans-serif;
  margin: 0; /* 2 외부 여백을 0으로 */
  cursor: default;
}

a {
  text-decoration: none; /* 3  a태그 밑줄제거 */
  color: #eae7b1; /* 4 글자색 변경 */
}

ul {
  list-style: none; /* 5 li태그 구슬 제거 */
  padding-left: 0; /* 6 */
}
/* 선택자가 id이면 #을 붙임 */
/* Navbar 
  navbar는 ID선택자로 되어 있기 때문에  navbar에게 야 너 안에 박스 두 개 있는데 
  우리 플렉스 박스로 하자 그래서 박스가 양쪽에 나올 수 있도록 
  그리고 지금 중심 축은 수평 축이죠 중심축에서 정렬할 수 있는 것은 justify-content니까
  space-between을 이용해서 간격이 떨어져 있도록 만든다
*/
#navbar {
  position: fixed; /* 13 */
  width: 100%; /* 12 */
  align-items: center; /* 10 */
  display: flex; /* 7 */
  padding: 16px; /* 11 */
  justify-content: space-between; /* 9 */
  background-color: #61876e; /* 8 */
  color: #eae7b1; /* 8-1 */
  z-index: 1; /* 이게 있어야 모두 nav바 아래로 들어감 */
}

#navbar.navbar--dark {
  background-color: #3c6255;
  padding: 8px;
}

.navbar-logo {
  font-size: 28px; /* 14 */
  font-weight: 600; /* 15 */
}

.navbar-menu {
  display: flex; /* 16 li 가로정렬하기 */
}

.navbar-menu-item {
  padding: 8px 12px; /* 20 내부여백 */
  margin: 0 4px; /* 19 외부여백 */
  cursor: pointer; /* 17 커서손모양 */
  border-radius: 4px; /* 18 */
}

.navbar-menu-item.active {
  border: 1px solid #eae7b1;
}

.navbar-menu-item:hover {
  background-color: #eae7b1; /* 19 */
  color: #3c6255; /* 20 */
}

/* Section common */
section {
  padding: 50px;
  text-align: center;
  max-width: 1200px;
  margin: auto;
}

/*  intro  */
#intro {
  background: url("../../images/도서-1.jpg") center/cover no-repeat; /* 반응형이 되도록 해줌 */
  padding: 40px;
  text-align: center;
}

.intro__avatar {
  width: 250px;
  height: 250px;
  border-radius: 50%;
  border: 2px solid #eeeeee;
}

.intro__title,
.intro__description {
  color: #4d4d4d;
}

.intro__contact {
  color: #eae7b1;
  background-color: #3c6255;
  font-size: 18px;
  font-weight: 700px;
  margin: 24px;
  padding: 8px 12px;
  border: 2px solid #eeeeee;
  border-radius: 6px;
  cursor: pointer;
}

/* About */
.about__majors {
  display: flex;
  justify-content: space-between;
  margin: 80px 0;
}

.major__icon {
  width: 170px;
  height: 170px;
  line-height: 170px;
  font-size: 70px;
  margin: auto;
  border: 1px solid #61876e;
  border-radius: 50%;
  margin-bottom: 16px;
  color: #3c6255;
  /* background-color: yellow; 안보이니까 배경색 넣고 작업하면 좋아*/
}

.major__icon i {
  transition: all var(--animation-duration) ease;
}

.major__icon:hover i {
  color: #61876e;
  transform: rotate(-30deg) scale(1.1);
}

.major__title,
.major__description {
  color: #4d4d4d;
}

.major__description {
  font-size: 16px;
}

.school {
  display: flex;
  align-items: center;
}

.school__description {
  margin: 0 16px;
  text-align: left;
}

.school__name,
.school__period {
  color: #7c7979;
}

.school__name {
  font-size: 16px;
}

.school__period {
  font-size: 14px;
}

/* Skill */
#skills {
  background-color: #fff7d1;
}
/* 
우리가 스킬셋이라는 컨테이너박스를 디스플레이로 만들어 볼게요 그러면 벌써 이렇게 양옆으로 정렬됨
아이템들이 크기가 자동적으로 늘어나게 만들기 위해서는 아이템별로 우리가 flex-basis 를 지정해 줌
*/
.skillset {
  display: flex; /* skills와 Tools가 두 줄로 보임 */
  background-color: #7c7979;
  color: #eeeeee;
  margin: 20px 0;
}

.skillset__title {
  color: white;
}

.skillset__left {
  flex-basis: 60%;
  background-color: #4d4d4d;
  padding: 20px 40px; /* 위아래 20와  양옆 40에 패딩 추가됨 */
}

.skill {
  margin-bottom: 32px;
}

.skill__description {
  display: flex; /* Skills의 목록이 왼쪽으로 밀착됨 */
  justify-content: space-between;
}

.skill__bar {
  width: 100%;
  height: 3px;
  background-color: #616161;
}
/* 
문제제기:모든 요소에 다 70%로 값이 할당되는게 보이죠 50으로 해도 다 똑같은 값이 적용됨
그래서 이 width는 css에서 정리하는 것이 아니라 html 태그에서 정의 되어져야 함
그리고 나중에 이런 데이터들은 따로 추출해서 제이슨에서 관리하고 제이슨에서 동적으로 
받아오고 이런 데이터를 html코드로 변환해서 자동적으로 생성을 할 거기 때문에 
html에 적용이 되어 있어야 해요
우리가 할 수 있는 방법은 태그에 스타일을 인라인화 하는 겁니다.
 */
.skill__value {
  /* width: 70%; */
  height: 3px;
  background-color: #feb546;
}

.skillset__right {
  flex-basis: 40%;
}

.tools {
  background-color: #616161;
}

.tools,
.etc {
  padding: 20px;
}

/* Work */
.work__categories {
  margin: 40px;
}

.category__btn {
  border: 1px solid #bdbdbd;
  border-radius: 4px;
  font-size: 18px;
  padding: 8px 48px;
}

.category__btn.selected,
.category__btn:hover {
  background-color: #3c6255;
  color: #eae7b1;
}

.category__btn.selected .category__count,
.category__btn:hover .category__count {
  opacity: 1;
  top: 0;
}

.category__count {
  background-color: #eae7b1;
  border-radius: 50%;
  color: #3c6255;
  width: 24px;
  height: 24px;
  display: inline-block;
  line-height: 24px;
  position: relative;
  top: -20px;
  left: 4px;
  opacity: 0;
  transition: all 300ms ease-out;
}

.work__projects {
  display: flex;
  flex-wrap: wrap; /* 한줄에 차지 않으면 밑으로 떨어지게 함 */
  justify-content: center;
  opacity: 1;
  transition: all 300ms ease-in;
}

.work__projects.anim-out {
  opacity: 0;
  transform: scale(0.96) translateY(40px);
}

.project {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 280px;
  height: 250px;
  margin: 2px;
  background-color: #eeeeee;
}

.project.invisible {
  display: none;
}

/* 자기가 담겨져 있는 크기 안에서만 차지해야 됨 */
.project__img {
  max-width: 100%;
  max-height: 100%;
  align-self: center;
}
/* 포지션 앱솔루트를 쓰게 되면 근접한 부모노드 중에 기본값인 포지션 스태틱을 쓰지 않는 부모를 찾아가게됨
   그런데 지금 포지션 디스크립션이 담겨 있는 부모는 프로젝트죠 여기 프로젝트 오면 아무것도 지정하지 않았기
   때문에 디폴트값인 스태틱이 됨
*/
.project__description {
  position: absolute;
  background-color: black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  opacity: 0; /* 0.8 로 테스트해봄 */
  transform: translateY(10px);
  transition: all 300ms ease-in;
}

.project:hover .project__description {
  opacity: 0.8;
  transform: translateY(0px);
}

.project__description h3 {
  color: #feb546;
}

.project__description h3:after {
  content: "";
  display: block;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  margin-top: 8px;
  width: 50px;
  height: 2px;
  background-color: #bdbdbd;
}

/* Contact */
#contact {
  background-color: #3c6255;
}

.contact__title,
.contact__email,
.contact__rights {
  color: #eae7b1;
}

.contact__title {
  margin: 32px 0;
}

.contact__links {
  font-size: 48px;
  margin: 24px 0;
  transition: all 300ms ease-in;
}

.contact__links i:hover {
  transform: scale(1.1);
  color: #fff7d1;
}

/* Arrow up
  원래는 안보이다가 스크롤링이 되면 보이게 해야 되잖아요. 그래서 애를 display:none 한 다음에 
  스크롤링이 되어서 우리가  visible이라는 그런 클래스를 줄때만 할 거기 때문에 
  .arrow-up.visible  보이는 클래스가 있을 때만 display를 block으로 그럼 자
  그런데 이렇게 하게 되면 나중에 애니메이션을 주게 되면 display:none을 이용하면
  document model에서 없어지기 때문에 없어지는 경우에는 애니메이션을 주기가 힘들어요
*/
/* 버튼 속성 없애버리기 */
button {
  background-color: transparent; /*배경색으로 맞춤*/
  cursor: pointer;
  border: none;
  outline: none;
}

.arrow-up {
  position: fixed;
  bottom: 50px;
  right: 50px;
  width: 70px;
  height: 70px;
  font-size: 50px;
  color: #eae7b1;
  background-color: #3c6255;
  border-radius: 50px;
  /* display: none; */
  /* 애니메이션 한 번 줘 볼게요 일단 arrow-up에서 transition을 줄건데
  우리가 한번 전체 다 해서 easy-in 하게 되면 애니메이션이 안되는게 보이죠?
  왜냐하면 이 display같은 경우는 완전히 없어졌다가 나타나는 거기 때문에 
  애니메이션이 되지 않아요 그래서 일단은 여기서 디스플레이 대신에 opacity를 0으로
  하고 여기서는 opacity를 1로 하고 우리가  opacity만 애니메이션 하면 되니까
  하지만 문제는 여기에 없음에도 불구하고 이거 커서가 올라가는게 보이죠? 불투명이긴
  하지만 실제로 있기 때문에 사용자가 클릭도 할 수 있어요 
  그래서 클릭이 안되게 하려면 일단 보인상태에서 여기서 만약에 pointer-events라고 
  있는데 이것을 none으로 지정하게 되면 클릭이 안되게 만들 수가 있어요 
  그래서 안보일때는 우리가 pointer-events를 이벤트를 이용해서 클릭이 안되도록 
  하면 될거 같아요 
  */
  opacity: 0;
  transition: all 300ms ease-in;
}
.arrow-up.visible {
  /* display: block; */
  opacity: 1;
  /* pointer-events: auto; 차이모르겠음*/
}
